{"version":3,"sources":["Quotes.jsx","Lamp.jsx","App.js","serviceWorker.js","index.js"],"names":["quotes","quote","character","image","Quotes","_ref","simpsonsOnly","react_default","a","createElement","filter","includes","map","index","src","alt","key","Lamp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","handleLamp","l","state","on","setState","light","className","onClick","toUpperCase","Component","App","src_Lamp","src_Quotes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,SAAS,CACX,CACEC,MACE,0FACFC,UAAW,gBACXC,MACE,gGAEJ,CACEF,MAAO,0DACPC,UAAW,eACXC,MACE,+FAEJ,CACEF,MAAO,iEACPC,UAAW,eACXC,MACE,+FAEJ,CACEF,MACE,oJACFC,UAAW,oBACXC,MACE,oGAeOC,EAVA,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,aAChB,OACEC,EAAAC,EAAAC,cAAA,WACGT,EAAOU,OAAO,SAAAT,GAAK,OAAIK,GAAgBL,EAAMC,UAAUS,SAAS,aAAYC,IAAI,SAACX,EAAOY,GAAR,OAC/EN,EAAAC,EAAAC,cAAA,OAAKK,IAAKb,EAAME,MAAOY,IAAI,GAAGC,IAAKf,EAAMC,gBCTlCe,cAxBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKVQ,YAAc,WAAM,IACRC,EAAeR,EAAKD,MAApBS,WACFC,EAAIT,EAAKU,MAAMC,GACrBX,EAAKY,SAAS,CAAED,IAAKX,EAAKU,MAAMC,KAChCH,EAAWC,IARXT,EAAKU,MAAQ,CACXC,IAAI,GAHSX,wEAcf,IAAMa,EAAQV,KAAKO,MAAMC,GAAK,KAAO,MACrC,OACAvB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,QACX1B,EAAAC,EAAAC,cAAA,UAAQyB,QAASZ,KAAKI,YAAaO,UAAWD,GAAQA,EAAMG,eAC5D5B,EAAAC,EAAAC,cAAA,UAAQwB,UAAWD,YAnBZI,aC0BJC,cAtBb,SAAAA,EAAYnB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBlB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMJ,KAMRS,WAAa,SAACC,GACZT,EAAKY,SAAS,CAAEzB,aAAcsB,KAN9BT,EAAKU,MAAQ,CACXvB,cAAc,GAHCa,wEAWV,IACCb,EAAiBgB,KAAKO,MAAtBvB,aACR,OACEC,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMX,WAAYL,KAAKK,aACvBpB,EAAAC,EAAAC,cAAC8B,EAAD,CAAQjC,aAAcA,YAlBZ8B,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.003cc1d5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst quotes = [\n    {\n      quote:\n        \"Facts are meaningless. You could use facts to prove anything that's even remotely true.\",\n      character: \"Homer Simpson\",\n      image:\n        \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FHomerSimpson.png?1497567511939\"\n    },\n    {\n      quote: \"Nothing you say can upset us. We're the MTV generation.\",\n      character: \"Bart Simpson\",\n      image:\n        \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FBartSimpson.png?1497567511638\"\n    },\n    {\n      quote: \"That's where I saw the leprechaun...He told me to burn things.\",\n      character: \"Ralph Wiggum\",\n      image:\n        \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FRalphWiggum.png?1497567511523\"\n    },\n    {\n      quote:\n        \"Hello, Simpson. I'm riding the bus today because Mother hid my car keys to punish me for talking to a woman on the phone. She was right to do it.\",\n      character: \"Principal Skinner\",\n      image:\n        \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FSeymourSkinner.png?1497567511460\"\n    }\n  ];\n  \n  \nconst Quotes = ({ simpsonsOnly}) => {\n  return(\n    <div>\n      {quotes.filter(quote => simpsonsOnly || quote.character.includes(\"Simpson\")).map((quote, index) => (\n        <img src={quote.image} alt=\"\" key={quote.character}/>\n      ))}\n    </div>\n  )\n}\n\nexport default Quotes;\n","import React, {Component} from 'react';\n\nclass Lamp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          on: false\n        };\n    }\n    handleClick = () => {\n        const { handleLamp } = this.props;\n        const l = this.state.on;\n        this.setState({ on: !this.state.on });\n        handleLamp(l);\n    }\n\n    render() {\n        const light = this.state.on ? 'on' : 'off';\n        return (\n        <div className=\"Lamp\">\n            <button onClick={this.handleClick} className={light}>{light.toUpperCase()}</button>\n            <figure className={light} />\n        </div>\n        );\n    }\n}\n\nexport default Lamp;","import React, { Component } from 'react';\nimport './App.css';\nimport Quotes from './Quotes';\nimport Lamp from './Lamp';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      simpsonsOnly: true\n    };\n  }\n\n  handleLamp = (l) => {\n    this.setState({ simpsonsOnly: l });\n  }\n\n  render() {\n    const { simpsonsOnly } = this.state;\n    return (\n      <div className=\"App\">\n        <h3>Simpson's only</h3>\n        <Lamp handleLamp={this.handleLamp} />\n        <Quotes simpsonsOnly={simpsonsOnly} />  \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}